q1:
def maximumIndex(N, B):
     
    max_index = 0
 
    for i in range(1, N + 1):
        max_index += i
 
    cur = max_index
    step = N
 
    while True:
        while cur > 0 and N > 0:
 
            cur -= N

            if (cur == B):
 
                # Restore to previous index
                cur += N
 
            # Decrement step by one
            N -= 1
 
        # If it reaches the 0th index
        if (cur <= 0):
             
            # Print result
            print(max_index)
            break
 
        # If max index fails to
        # reach the 0th index
        else:
            N = step
 
            # Store max_index - 1 in current index
            cur = max_index - 1
 
            # Decrement max index
            max_index -= 1
 
            # If current index is equal to B
            if (cur == B):
                cur = max_index - 1
 
                # Decrement current index
                max_index -= 1



q2:
def reverse_input(inp, lb, hb):
    print(inp)
    while(lb<hb):
        inp[lb], inp[hb] = inp[hb], inp[lb]
        lb+=1
        hb-=1

    return inp

def rearrangeWord(word):
    # output = [0]*len(word)
    # current = output[-1] # last word to traverse from behind
    
    # idea is to identify longest non-increasing suffix and swap the pivot element with the rightmost successor of pivot in the suffix, and reverse the suffix values and return
    word = list(word)
    n = len(word)
    idx1,nextgr_ix = -1,-1
    
    for i in range(n-1, -1, -1):
        if(word[i-1] < word[i]):
            idx1= i-1
            break
            
    if(idx1 == -1):
        # reverse as it is as there given input is already the last permutation
        # op = word[::-1]
        return 'no answer'
    
    for i in range(n-1, -1, -1, ):
        if(word[i] > word[idx1]):
            nextgr_ix=i
